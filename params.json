{"name":"Versioneye-php","tagline":"a PHP CLI tool and library for interacting with the VersionEye API","body":"#a PHP CLI/Library for the VersionEye API\r\n\r\nsee https://www.versioneye.com/api/ for API documentation\r\n\r\n[![Build Status](https://img.shields.io/travis/digitalkaoz/versioneye-php/master.svg?style=flat-square)](https://travis-ci.org/digitalkaoz/versioneye-php)\r\n[![Dependency Status](https://img.shields.io/versioneye/d/php/digitalkaoz:versioneye-php.svg?style=flat-square)](https://www.versioneye.com/php/digitalkaoz:versioneye-php)\r\n[![Scrutinizer Code Quality](https://img.shields.io/scrutinizer/g/digitalkaoz/versioneye-php.svg?style=flat-square)](https://scrutinizer-ci.com/g/digitalkaoz/versioneye-php/?branch=master)\r\n[![Code Coverage](https://img.shields.io/scrutinizer/coverage/g/digitalkaoz/versioneye-php/master.svg?style=flat-square)](https://scrutinizer-ci.com/g/digitalkaoz/versioneye-php/?branch=master)\r\n[![SensioLabsInsight](https://img.shields.io/sensiolabs/i/f7633a7e-4577-4a86-b6d9-ccaa75cb7fa0.svg?style=flat-square)](https://insight.sensiolabs.com/projects/f7633a7e-4577-4a86-b6d9-ccaa75cb7fa0)\r\n[![Latest Stable Version](https://img.shields.io/packagist/v/digitalkaoz/versioneye-php.svg?style=flat-square)](https://packagist.org/packages/digitalkaoz/versioneye-php)\r\n[![Total Downloads](https://img.shields.io/packagist/dt/digitalkaoz/versioneye-php.svg?style=flat-square)](https://packagist.org/packages/digitalkaoz/versioneye-php)\r\n\r\n##Installation\r\n\r\nThere are 2 ways to install it: \r\n \r\n  - Download the Phar (recommended)\r\n  - Install from source code\r\n\r\n### Download the Phar (recommended)\r\n\r\ndownload the latest version from the [Releases section](https://github.com/digitalkaoz/versioneye-php/releases/latest) or from the cli:\r\n\r\n```\r\n$ wget https://github.com/digitalkaoz/versioneye-php/releases/download/0.8.0/versioneye.phar //or latest stable\r\n```\r\n\r\n### Install from source code\r\n\r\nfirst you have to decide which `http adapter` to use. The library supports all adapters supported by [egeloen/ivory-http-adapter](https://github.com/egeloen/ivory-http-adapter)\r\nWhere `fopen` is last resort if even `curl` is missing.\r\n\r\n```\r\n$ composer require \"digitalkaoz/versioneye-php\" @stable\r\n```\r\n\r\n##Usage\r\n\r\nall API endpoints are implemented, see https://www.versioneye.com/api/v2/swagger_doc.json for their detailed docs.\r\n\r\n\r\n### programmatic:\r\n\r\n```php\r\n<?php\r\n\r\nuse Rs\\VersionEye\\Client;\r\n\r\n$api = (new Client())->api('services');     // Rs\\VersionEye\\Api\\Services\r\n$api->ping(); //array\r\n\r\n//other implemented APIs\r\n$api = (new Client())->api('github');       // Rs\\VersionEye\\Api\\Github\r\n$api = (new Client())->api('me');           // Rs\\VersionEye\\Api\\Me\r\n$api = (new Client())->api('projects');     // Rs\\VersionEye\\Api\\Projects\r\n$api = (new Client())->api('products');     // Rs\\VersionEye\\Api\\Products\r\n$api = (new Client())->api('sessions');     // Rs\\VersionEye\\Api\\Sessions\r\n$api = (new Client())->api('users');        // Rs\\VersionEye\\Api\\Users\r\n\r\n```\r\n\r\n### cli:\r\n\r\nHere some usage examples.\r\n\r\n```\r\n$ bin/versioneye services:ping\r\n$ bin/versioneye products:search symfony\r\n```\r\n\r\nOr with the phar file. \r\n\r\n```\r\nphp versioneye.phar products:search \"symfony\"\r\nphp versioneye.phar products:show \"php\" \"symfony:symfony\"\r\n```\r\n\r\nThe last command requires that you have setup your [API Key](https://www.versioneye.com/settings/api) correctly. \r\n\r\n\r\n##Configuration\r\n\r\nto store your [generated API Token](https://www.versioneye.com/settings/api) globally you can create a global config file in your home directory:\r\n\r\n`~/.veye.rc` we share the same config file with the ruby cli https://github.com/versioneye/veye\r\n\r\nthe file would look like:\r\n\r\n```rc\r\n:api_key: YOUR_API_TOKEN\r\n```\r\n\r\nnow you dont have to pass your token on each call!\r\n\r\n\r\n##CLI Tool\r\n\r\nto build a standalone phar, simply execute the following commands.\r\n\r\n```\r\n$ composer require --dev kherge/box @stable\r\n$ vendor/bin/box build\r\n$ php versioneye-php.phar\r\n```\r\n\r\n## Commands:\r\n\r\nThe Commands are autogenerated by introspecting the API Implementations. Each Public Method is a Command, each Method Parameter will be translated into a InputArgument or InputOption.\r\n\r\n\r\n    github\r\n      github:delete            remove imported project\r\n      github:hook              GitHub Hook\r\n      github:import            imports project file from github\r\n      github:repos             lists your's github repos\r\n      github:show              shows the detailed information for the repository\r\n      github:sync              re-load github data\r\n    me\r\n      me:comments              shows comments of authorized user\r\n      me:favorites             shows favorite packages for authorized user\r\n      me:notifications         shows unread notifications of authorized user\r\n      me:profile               shows profile of authorized user\r\n    products\r\n      products:follow          follow your favorite software package\r\n      products:follow-status   check your following status\r\n      products:references      references\r\n      products:search          search packages\r\n      products:show            detailed information for specific package\r\n      products:unfollow        unfollow given software package\r\n    projects\r\n      projects:all             shows user`s projects\r\n      projects:create          upload project file\r\n      projects:delete          delete given project\r\n      projects:licenses        get grouped view of licences for dependencies\r\n      projects:show            shows the project's information\r\n      projects:update          update project with new file\r\n    services\r\n      services:ping            Answers to request with basic pong.\r\n    sessions\r\n      sessions:close           delete current session aka log out.\r\n      sessions:open            creates new sessions\r\n      sessions:show            returns session info for authorized users\r\n    users\r\n      users:comments           shows user's comments\r\n      users:favorites          shows user's favorite packages\r\n      users:show               shows profile of given user_id\r\n\r\n\r\n## FAQ\r\n\r\n### implement a new HTTP Adapter\r\n\r\nsimply implement the `Rs\\VersionEye\\Http\\HttpClient` Interface:\r\n\r\n```php\r\n<?php\r\nclass MyHttpClient implements HttpClient\r\n{\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    public function request($method, $url, array $params = [])\r\n    {\r\n        //implement your own special http handling here\r\n    }\r\n}\r\n```\r\n\r\nand then pass it the the Client:\r\n\r\n```php\r\n<?php \r\n\r\n$api = (new Client(new MyHttpClient))->api('users');\r\n```\r\n\r\n### writing a new Api\r\n\r\nsimply implement the `Rs\\VersionEye\\Api\\Api` Interface:\r\n\r\n```php\r\n<?php\r\nnamespace Rs\\VersionEye\\Api;\r\n\r\nclass Foo implements Api\r\n{\r\n    /**\r\n     * awesome api endpoint\r\n     */\r\n    public function bar($bar, $bazz=1)\r\n    {\r\n        //implement api endpoint\r\n    }\r\n}\r\n```\r\n\r\nthe you have to register the Api in the `CommandFactory` (maybe even that could be autogenerated by searching all implementors of Interface `Rs\\VersionEye\\Api\\Api`):\r\n\r\n```php\r\n<?php \r\nclass CommandFactory\r\n{\r\n    /**\r\n     * generates Commands from all Api Methods\r\n     *\r\n     * @param  array     $classes\r\n     * @return Command[]\r\n     */\r\n    public function generateCommands(array $classes = [])\r\n    {\r\n        $classes = $classes ?: [\r\n            //...\r\n            'Rs\\VersionEye\\Api\\Foo'\r\n        ];\r\n    }\r\n}    \r\n``` \r\nbe aware that each public method would be exposed as `Command`. Mandatory Parameters will be `InputArgument`s, optionals will be a `InputOption`. The Command description would be taken from the `phpdoc`!\r\n\r\nSo the above example will be generated to this `Command`:\r\n\r\n    foo:bar --bazz=1 bar      //awesome api endpoint\r\n\r\n\r\n### Writing a new Console Output Formatter\r\n\r\nby default the `Command` tries to find the same API method in the Output Classes (if not it will output the data as simple `print_r`:\r\n\r\n`Rs\\VersionEye\\Api\\Github:sync` **API** ----> `Rs\\VersionEye\\Output\\Github:sync` **Output**\r\n\r\nso for the above Example simply create the following Class:\r\n\r\n```php\r\n<?php\r\n\r\nnamespace Rs\\VersionEye\\Output;\r\n\r\nclass Foo\r\n{\r\n    public function bar(OutputInterface $output, $response)\r\n    {\r\n        //output the $response (API Result)\r\n    }\r\n}\r\n```\r\n\r\nthats all.\r\n\r\n##Tests\r\n\r\n```\r\n$ composer require --dev henrikbjorn/phpspec-code-coverage \"1.0.*@dev\"\r\n$ vendor/bin/phpspec run\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}